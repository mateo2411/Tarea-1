/* TAREA 1                                               *
*  CURSO: LENGUAJES DE PROGRAMACIÓN - LPW72 GRUPO 1      *
*  DOCENTE: JUAN CAMILO CORREA CHICA                     *
*  INSTITUTO TECNOLÓGICO METROPOLITANO                   *
*  FECHA MÁXIMA DE ENTREGA: MARZO 20/2019 - 11:59PM      */

#include<iostream>
#include<string>
#include<math.h>

using namespace std;

#define True 1
#define False 0

bool ok_chscrb = False;

// 1. La función NumCharToInt es una función que debe convertir un número escrito en letras (cadena de caracteres) 
// en un número de tipo entero, usted debe agregar las líneas de código necesarias para implementar dicha funcionalidad.
// Se debe garantizar que se convierten números enteros positivos y negativos.
// Se debe garantizar que la función no intente convertir un número que sobrepasa la capacidad del tipo de dato int.
// Utilice el tipo de dato "string" en caso de necesitar alguna variable para almacenar cadenas de caracteres.
// Utilice al final una sentencia cout<< <<endl; para imprimir en pantalla el número transformado a entero
// Dato1: La representación en caracter (ASCII) de un número natural (0 al 9) es igual al número + 48 (o bien 0x30 en hexa)
//        Ejemplo: '9' = 9 + 48 = 0x09 + 0x30
// Dato2: Para verificar la longitud de la cadena de caracteres que representa un número puede usar el operador size()
//        Ejemplo: string numero = "123456" -> numero.size() da como resultado 6
// Dato3: Solo puede utilizar declaración de variables, operadores de C++ y estructuras de control para codificar la solución.
// Dato4: Recuerde que las cadenas de caracteres (strings) se comportan como arrays de tipo char, se puede utilizar el operador
//        corchetes [] para acceder individualmente a las letras -> Ejemplo: string hh = "Hola"; hh[1] es la letra o

void NumStringToInt(string numero)
{
	string num = "-577"; /* NO borre esta linea de codigo */
	int m = num.size();
	signed long int Res = 0;
	int y = 0;
	long int z = 0;
	for(int i=m-1; i >= 0; i--){
	    int x = num[i]-48;
	    char b = num[i];
	    if (b == 45){
	        Res = Res*(-1);
	    }
	    else{
	        z = x*(pow(10,y));
	        Res = Res + z;
            y = y+1;
	    }
	}
	cout<<"El resultado es:"<<Res<<endl;
}

// 2. La función CheckScrabble es una función que debe permitir descubrir si dos palabras están escritas con las mismas letras pero
// en distinto orden, ejemplos: "#Colombia" y "Boci#loam", "Z4PotlaN3jo" y "Pozjotlan43". Usted debe codificar esta funcionalidad usando
// operadores y estructuras de control de C++.
// En caso de que las palabras cumplan con la caracteristica de estar escritas con las mismas letras (¡la misma cantidad de letras obviamente!)
// se debe asignar el valor True a la variable ok_chscrb.
// Las palabras pueden estar formadas indistintamente por letras, números y caracteres raros, tal como vio en los ejemplos.
// Dato1: Lo primero que se debe verificar es si las palabras tienen el mismo número de letras, recuerde el operador size() del ejercicio anterior
// Dato2: Preguntele al buen Google por la representación en ASCII de las letras del abecedario (mayusculas y minusculas)
// Dato3: Puede utilizar directamente las variables palabra1 y palabra2 para implementar su codigo
// Pista esencial: NO es necesario que compare letra por letra individualmente.
//                 Reduzca el problema a un dominio común.

void CheckScrabble (string &palabra1, string &palabra2)
{
	ok_chscrb = False; /*Por favor NO borre esta linea de codigo*/
	string pal1 = "Z4PotlaN3jo2";
	string pal2 = "Pozjotlan432";
	string mayus = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	string minus = "abcdefghijklmnopqrstuvwxyz";
	string vec1;
	string vec2;
	int a = pal1.size();
	int b = pal2.size();
	int M = mayus.size();
	int verifica = 0;
	if (a==b)
	{
	    for (int c=0; c<a ;++c)      //Recorrido de la primera palabra
	    {
	        char rec1 = pal1[c];
	        for (int d=0; d<M; d++)         //Recorrido de las mayusculas          
	        {
	            char camb1 = mayus[d];
	            if (rec1 == camb1)          //Cambio mayusculas a minusculas
	            {
	                char fin1 = minus[d];
	                rec1 = fin1;
	                break;
	            }
	            
	        }
	        vec1 = vec1 + rec1;
	    }
	    for (int e=0; e<b ;++e)      //Recorrido de la segunda palabra
	    {
	        char rec2 = pal2[e];
	        for (int f=0; f<M; f++)         //Recorrido de las mayusculas          
	        {
	            char camb2 = mayus[f];
	            if (rec2 == camb2)          //Cambio mayusculas a minusculas
	            {
	                char fin2 = minus[f];
	                rec2 = fin2;
	                break;
	            }
	        }
	        vec2 = vec2 + rec2;
	    }
	    for (int g=0; g<a; g++)             //Recorrido del nuevo vector1
	    {
	        char res1 = vec1[g];
	        for (int h=0; h<a; h++)         // Recorrido del nuevo vector2
	        {
	            char res2 = vec2[h];
	            if (res1 == res2)
	            {
	                verifica = verifica + 1;
	                break;
	            }
	        }
	    }
	    if (verifica == a)
	    {
	        ok_chscrb = True;
	    }
	}
	
	    
	//De aqui en adelante se debe implementar la lógica en código de C++
	
	
	/*************************************************************/
	/*Por favor NO borre las lineas de codigo siguientes */	
	if(ok_chscrb)
		cout<<"Tienen las mismas letras"<<endl;
	else
		cout<<"No tienen las mismas letras"<<endl;	
}


// 3. En la funcion printStruct utilice un puntero a la estructura local_struct, aritmetica de punteros y conversión explícita (type casting) 
// para imprimir el valor de los miembros de la estructura local declarada en la función.
// Dato1: NO debe utilizarse el operador punto (.) ni el operador flecha (->) Solo el puntero a local_struct y aritmetica de punteros.
// Dato2: Para imprimir los valores utilice la función "cout". Ejemplo: cout<<var_x<<endl;
// Enlaces útiles: http://ecomputernotes.com/what-is-c/function-a-pointer/type-casting-of-pointers 
//                 https://es.wikibooks.org/wiki/Programaci%C3%B3n_en_C/Punteros
//                 https://dgvergel.blogspot.com/2015/02/gestion-de-memoria-iii.html
//                 https://www.taringa.net/+apuntes_y_monografias/c-alineamiento-de-memoria-en-structs-clases_waqeq


/*Por favor NO borre las lineas de codigo siguientes que definen la estructura */
struct Clase
	{
		char mem1 = 'D';
		double mem2 = 12345678987654321.88888888888889;
		unsigned short mem3 = 4554;
		float mem4 = 3.14159;
		long long int mem5 = 5444333222;
		char mem6 = 'X';
		int mem7 = 434776;
		double mem8 = 2.35656778457911;		
	};

void printStruct(void)
{
	struct Clase local_struct; /*NO borre esta linea con la declaracion de la estructura local_struct */
	
	//De aqui en adelante se debe implementar la lógica en código de C++
	
	
}


/* NO es necesario que modifique nada de la función main */

int main()
{
	//1.
	string number = "45678945";
	string numerato = "777000555666999";
	NumStringToInt(number);
	NumStringToInt(numerato);
	cout<<endl;
	
	//2. 
	string pal1 = "Mex1C4l1";
	string pal2 = "411clEmX";
	string pw1 = "Lenguajes";
	string pw2 = "Languages";
	CheckScrabble (pal1, pal2);
	CheckScrabble (pw1, pw2);
	cout<<endl;
	
	//3.
	printStruct();
}
